package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"

	"github.com/rixtrayker/ticketing-system/internal/graph/generated"
	"github.com/rixtrayker/ticketing-system/internal/graph/model"
	"github.com/rixtrayker/ticketing-system/internal/models"
)

// ID is the resolver for the id field.
func (r *assetResolver) ID(ctx context.Context, obj *models.Asset) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *commentResolver) ID(ctx context.Context, obj *models.Comment) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *maintenanceRecordResolver) ID(ctx context.Context, obj *models.MaintenanceRecord) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *maintenanceScheduleResolver) ID(ctx context.Context, obj *models.MaintenanceSchedule) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, input model.CreateTicketInput) (*models.Ticket, error) {
	panic(fmt.Errorf("not implemented: CreateTicket - createTicket"))
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, id string, input model.UpdateTicketInput) (*models.Ticket, error) {
	panic(fmt.Errorf("not implemented: UpdateTicket - updateTicket"))
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTicket - deleteTicket"))
}

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input model.CreateAssetInput) (*models.Asset, error) {
	panic(fmt.Errorf("not implemented: CreateAsset - createAsset"))
}

// UpdateAsset is the resolver for the updateAsset field.
func (r *mutationResolver) UpdateAsset(ctx context.Context, id string, input model.UpdateAssetInput) (*models.Asset, error) {
	panic(fmt.Errorf("not implemented: UpdateAsset - updateAsset"))
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAsset - deleteAsset"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateMaintenanceSchedule is the resolver for the createMaintenanceSchedule field.
func (r *mutationResolver) CreateMaintenanceSchedule(ctx context.Context, input model.CreateMaintenanceScheduleInput) (*models.MaintenanceSchedule, error) {
	panic(fmt.Errorf("not implemented: CreateMaintenanceSchedule - createMaintenanceSchedule"))
}

// UpdateMaintenanceSchedule is the resolver for the updateMaintenanceSchedule field.
func (r *mutationResolver) UpdateMaintenanceSchedule(ctx context.Context, id string, input model.UpdateMaintenanceScheduleInput) (*models.MaintenanceSchedule, error) {
	panic(fmt.Errorf("not implemented: UpdateMaintenanceSchedule - updateMaintenanceSchedule"))
}

// DeleteMaintenanceSchedule is the resolver for the deleteMaintenanceSchedule field.
func (r *mutationResolver) DeleteMaintenanceSchedule(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMaintenanceSchedule - deleteMaintenanceSchedule"))
}

// ID is the resolver for the id field.
func (r *partResolver) ID(ctx context.Context, obj *models.Part) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *partUsageResolver) ID(ctx context.Context, obj *models.PartUsage) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context, filter *models.TicketFilter) ([]*models.Ticket, error) {
	panic(fmt.Errorf("not implemented: Tickets - tickets"))
}

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, id string) (*models.Ticket, error) {
	panic(fmt.Errorf("not implemented: Ticket - ticket"))
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context, filter *models.AssetFilter) ([]*models.Asset, error) {
	panic(fmt.Errorf("not implemented: Assets - assets"))
}

// Asset is the resolver for the asset field.
func (r *queryResolver) Asset(ctx context.Context, id string) (*models.Asset, error) {
	panic(fmt.Errorf("not implemented: Asset - asset"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter *models.UserFilter) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// MaintenanceSchedules is the resolver for the maintenanceSchedules field.
func (r *queryResolver) MaintenanceSchedules(ctx context.Context, filter *models.MaintenanceScheduleFilter) ([]*models.MaintenanceSchedule, error) {
	panic(fmt.Errorf("not implemented: MaintenanceSchedules - maintenanceSchedules"))
}

// MaintenanceSchedule is the resolver for the maintenanceSchedule field.
func (r *queryResolver) MaintenanceSchedule(ctx context.Context, id string) (*models.MaintenanceSchedule, error) {
	panic(fmt.Errorf("not implemented: MaintenanceSchedule - maintenanceSchedule"))
}

// ID is the resolver for the id field.
func (r *ticketResolver) ID(ctx context.Context, obj *models.Ticket) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// AssignedTo is the resolver for the assignedTo field.
func (r *maintenanceScheduleFilterResolver) AssignedTo(ctx context.Context, obj *models.MaintenanceScheduleFilter, data *string) error {
	panic(fmt.Errorf("not implemented: AssignedTo - assignedTo"))
}

// Asset is the resolver for the asset field.
func (r *maintenanceScheduleFilterResolver) Asset(ctx context.Context, obj *models.MaintenanceScheduleFilter, data *string) error {
	panic(fmt.Errorf("not implemented: Asset - asset"))
}

// AssignedTo is the resolver for the assignedTo field.
func (r *ticketFilterResolver) AssignedTo(ctx context.Context, obj *models.TicketFilter, data *string) error {
	panic(fmt.Errorf("not implemented: AssignedTo - assignedTo"))
}

// CreatedBy is the resolver for the createdBy field.
func (r *ticketFilterResolver) CreatedBy(ctx context.Context, obj *models.TicketFilter, data *string) error {
	panic(fmt.Errorf("not implemented: CreatedBy - createdBy"))
}

// Asset is the resolver for the asset field.
func (r *ticketFilterResolver) Asset(ctx context.Context, obj *models.TicketFilter, data *string) error {
	panic(fmt.Errorf("not implemented: Asset - asset"))
}

// Email is the resolver for the email field.
func (r *userFilterResolver) Email(ctx context.Context, obj *models.UserFilter, data *string) error {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Asset returns generated.AssetResolver implementation.
func (r *Resolver) Asset() generated.AssetResolver { return &assetResolver{r} }

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

// MaintenanceRecord returns generated.MaintenanceRecordResolver implementation.
func (r *Resolver) MaintenanceRecord() generated.MaintenanceRecordResolver {
	return &maintenanceRecordResolver{r}
}

// MaintenanceSchedule returns generated.MaintenanceScheduleResolver implementation.
func (r *Resolver) MaintenanceSchedule() generated.MaintenanceScheduleResolver {
	return &maintenanceScheduleResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Part returns generated.PartResolver implementation.
func (r *Resolver) Part() generated.PartResolver { return &partResolver{r} }

// PartUsage returns generated.PartUsageResolver implementation.
func (r *Resolver) PartUsage() generated.PartUsageResolver { return &partUsageResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Ticket returns generated.TicketResolver implementation.
func (r *Resolver) Ticket() generated.TicketResolver { return &ticketResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// MaintenanceScheduleFilter returns generated.MaintenanceScheduleFilterResolver implementation.
func (r *Resolver) MaintenanceScheduleFilter() generated.MaintenanceScheduleFilterResolver {
	return &maintenanceScheduleFilterResolver{r}
}

// TicketFilter returns generated.TicketFilterResolver implementation.
func (r *Resolver) TicketFilter() generated.TicketFilterResolver { return &ticketFilterResolver{r} }

// UserFilter returns generated.UserFilterResolver implementation.
func (r *Resolver) UserFilter() generated.UserFilterResolver { return &userFilterResolver{r} }

type assetResolver struct{ *Resolver }
type commentResolver struct{ *Resolver }
type maintenanceRecordResolver struct{ *Resolver }
type maintenanceScheduleResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type partResolver struct{ *Resolver }
type partUsageResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type ticketResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type maintenanceScheduleFilterResolver struct{ *Resolver }
type ticketFilterResolver struct{ *Resolver }
type userFilterResolver struct{ *Resolver }
